-- MySQL Script generated by MySQL Workbench
-- Mon Jan 27 10:54:10 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema todo_list
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `todo_list` ;

-- -----------------------------------------------------
-- Schema todo_list
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `todo_list` DEFAULT CHARACTER SET utf8 ;
USE `todo_list` ;

-- -----------------------------------------------------
-- Table `todo_list`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`roles` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`roles` (
  `role_id` INT NOT NULL AUTO_INCREMENT,
  `role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`role_id`),
  UNIQUE INDEX `name_UNIQUE` (`role` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`users` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `lastname` VARCHAR(45) NULL,
  `username` VARCHAR(45) NULL,
  `email` VARCHAR(255) NOT NULL,
  `phone` VARCHAR(15) NULL,
  `password` VARCHAR(255) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `avatar_url` VARCHAR(500) NULL,
  `role_id` INT NOT NULL DEFAULT 0000 COMMENT 'hay que configurar el default con un role generico',
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `role_idx` (`role_id` ASC) VISIBLE,
  CONSTRAINT `user_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `todo_list`.`roles` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`tasks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`tasks` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`tasks` (
  `task_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL,
  `status` ENUM('pending', 'done', 'inprogress', 'paused', 'canceled') NOT NULL DEFAULT 'pending',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `parent_task_id` INT NULL DEFAULT NULL,
  `created_by` INT NOT NULL DEFAULT 0000,
  PRIMARY KEY (`task_id`),
  INDEX `parent_idx` (`parent_task_id` ASC) VISIBLE,
  INDEX `created_by_idx` (`created_by` ASC) VISIBLE,
  CONSTRAINT `task_parent`
    FOREIGN KEY (`parent_task_id`)
    REFERENCES `todo_list`.`tasks` (`task_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `task_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `todo_list`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`user_tasks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`user_tasks` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`user_tasks` (
  `user_task_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `task_id` INT NOT NULL,
  `task_asigned_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_task_id`),
  INDEX `user_idx` (`user_id` ASC) VISIBLE,
  INDEX `task_idx` (`task_id` ASC) VISIBLE,
  CONSTRAINT `user_in_task`
    FOREIGN KEY (`user_id`)
    REFERENCES `todo_list`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `task_asigned`
    FOREIGN KEY (`task_id`)
    REFERENCES `todo_list`.`tasks` (`task_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`comments` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`comments` (
  `comment_id` INT NOT NULL AUTO_INCREMENT,
  `task_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `content` TEXT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `parent_comment_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`comment_id`),
  INDEX `user_idx` (`user_id` ASC) VISIBLE,
  INDEX `task_idx` (`task_id` ASC) VISIBLE,
  INDEX `parent_comment_idx` (`parent_comment_id` ASC) VISIBLE,
  CONSTRAINT `comment_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `todo_list`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `comment_task_id`
    FOREIGN KEY (`task_id`)
    REFERENCES `todo_list`.`tasks` (`task_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `parent_comment`
    FOREIGN KEY (`parent_comment_id`)
    REFERENCES `todo_list`.`comments` (`comment_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`reactions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`reactions` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`reactions` (
  `reactions_id` INT NOT NULL AUTO_INCREMENT,
  `comment_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `type` ENUM('like', 'dislike', 'laugh', 'wow') NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`reactions_id`),
  INDEX `comment_idx` (`comment_id` ASC) VISIBLE,
  INDEX `user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `reaction_comment_id`
    FOREIGN KEY (`comment_id`)
    REFERENCES `todo_list`.`comments` (`comment_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `reaction_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `todo_list`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `todo_list`.`requests_task`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `todo_list`.`requests_task` ;

CREATE TABLE IF NOT EXISTS `todo_list`.`requests_task` (
  `request_id` INT NOT NULL AUTO_INCREMENT,
  `task_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `status` ENUM('pending', 'accepted', 'declined') NOT NULL DEFAULT 'pending',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`request_id`),
  INDEX `user_idx` (`user_id` ASC) VISIBLE,
  INDEX `task_idx` (`task_id` ASC) VISIBLE,
  CONSTRAINT `request_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `todo_list`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `requested_task`
    FOREIGN KEY (`task_id`)
    REFERENCES `todo_list`.`tasks` (`task_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `todo_list`;

DELIMITER $$

USE `todo_list`$$
DROP TRIGGER IF EXISTS `todo_list`.`AFTER_tasks_DELETE` $$
USE `todo_list`$$
CREATE DEFINER = CURRENT_USER TRIGGER `todo_list`.`AFTER_tasks_DELETE` AFTER DELETE ON `tasks` FOR EACH ROW
BEGIN
    -- Actualizar el parent_task_id de las subtareas al abuelo (OLD.parent_task_id)
    UPDATE tasks
    SET parent_task_id = OLD.parent_task_id
    WHERE parent_task_id = OLD.task_id;

    -- Nota: No necesitamos eliminar manualmente el padre porque este es AFTER DELETE
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
